#!/bin/bash
set -e

# Configs root directories
ASSETS='/tmp/assets'

# Running an apt-cacher is a good way to speed up installs. I run one on my home
# network and it speeds up installs _a lot_.
if $(nc -w1 cato 3142); then
  echo 'Apt-cacher detected on host cato'
  echo 'Acquire::http { proxy "http://cato:3142"; };' \
    > /etc/apt/apt.conf.d/02proxy
fi

# Also check to see if boot2docker host has the apt-cacher
if $(nc -w1 172.28.128.1 3142); then
  echo 'Apt-cacher detected on boot2docker host'
  echo 'Acquire::http { proxy "http://172.28.128.1:3142"; };' \
    > /etc/apt/apt.conf.d/02proxy
fi

# Also check to see if one's running on our vagrant hypervisor
if $(nc -w1 10.0.2.2 3142); then
  echo 'Apt-cacher detected on vagrant hypervisor'
  echo 'Acquire::http { proxy "http://10.0.2.2:3142"; };' \
    > /etc/apt/apt.conf.d/02proxy
fi

apt-get update
apt-get install -y nginx php5-fpm

# Fix a small security risk with php5-fpm
sed -i 's/cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php5/fpm/php.ini

# Add my public key. Remember to remove this section if you're not me :)
echo 'ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAG9F19s03YbWaHW6p1xDHbkCp2pd1DpBlrHLe1aJnu56CDIVSizkBXl5sGrgv3lfPnTzsvf6PuT6TBdxXXbDUQWkQF7BKnvbiHr9fFLAstPhRtJBVsb0en8XywALBjuCJ+xk3GePudYH7y+NtmffZmOEmz8IaeRsDDgI5YliWvo+Ic78Q==' > /root/.ssh/authorized_keys

WEB_HOME='/var/www'

# ping.heystephenwood.com
mkdir -p ${WEB_HOME}/ping.heystephenwood.com
cp -r -- ${ASSETS}/vhosts/ping.heystephenwood.com/public_html/* ${WEB_HOME}/ping.heystephenwood.com/
cp -- ${ASSETS}/vhosts/ping.heystephenwood.com/ping_heystephenwood_com.conf /etc/nginx/conf.d/

# eth0.me
mkdir -p ${WEB_HOME}/eth0.me
cp -r -- ${ASSETS}/vhosts/eth0.me/public_html/* ${WEB_HOME}/eth0.me/
cp -- ${ASSETS}/vhosts/vhosts/eth0_me.conf /etc/nginx/conf.d/

# If we're running in vagrant (for testing), we'll generate a self-signed
# SSL certificate
test -d /container/ssl || mkdir -p /container/ssl
pushd /container/ssl/
test -d /vagrant                                                           \
  && openssl req -new -newkey rsa:4096 -days 365 -nodes -x509              \
    -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=ping.heystephenwood.com" \
    -keyout ping.heystephenwood.com.key                                    \
    -out ping.heystephenwood.com.cert

# Make nginx run in foreground (important for using runit) and also turn the worker processes down to 1
sed -i '1s/^/daemon off;/' /etc/nginx/nginx.conf
sed -i 's/worker_processes.*$/worker_processes 1;/' /etc/nginx/nginx.conf

# Add the runit script
test -d /etc/service/nginx || mkdir -p /etc/service/nginx
cat > /etc/service/nginx/run <<RUN
#!/bin/bash
set -e

exec /usr/sbin/nginx -q
RUN

# runit will execute this script to start the webserver
chmod +x /etc/service/nginx/run

# Make sure www-data can only read and execute files
chown -R nobody.www-data /var/www
chmod -R 550 /var/www

